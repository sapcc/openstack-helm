kind: Deployment
apiVersion: extensions/v1beta1

metadata:
  name: postgres-{{.Values.name}}
  namespace:  {{.Release.Namespace}}
  labels:
    system: openstack
    type: database
    component: {{.Values.name}}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: postgres-{{.Values.name}}
  template:
    metadata:
      labels:
        name: postgres-{{.Values.name}}
    spec:
      hostPID: false
      volumes:
        - name: postgres-persistent-storage
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: db-{{.Values.name}}-pvclaim
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: db-init
          configMap:
            name: db-init-{{.Values.name}}
        - name: db-maintain
          configMap:
            name: db-maintain-{{.Values.name}}
        - name: postgres-etc
          configMap:
            name: postgres-etc-{{.Values.name}}
        - name: container-init
          configMap:
            name: postgres-bin-{{.Values.name}}
{{- if .Values.backup.enabled }}
        - name: postgres-socket
          emptyDir: {}
        - name: postgres-backup-config-volume
          configMap:
            name: postgres-backup-{{.Values.name}}
{{- end }}
      containers:
        - name: postgres
          image: {{.Values.global.image_repository}}/{{.Values.global.image_namespace}}/postgres:{{.Values.image_version_postgres}}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - pg_isready
              - -h
              - localhost
              - -p
              - "{{.Values.port_private}}"
              - -U
              - postgres
            initialDelaySeconds: 20
            timeoutSeconds: 5
          env:
            - name: PGDATA
              value: /postgresql-data/data/
            - name: POSTGRES_USER
              value: {{.Values.user}}
            - name: POSTGRES_PASSWORD
              value: {{.Values.password}}
{{- if .Values.backup.enabled }}
            - name: BARMAN_PASSWORD
              value: {{.Values.password_barman}}
            - name: BARMAN_STREAMING_PASSWORD
              value: {{.Values.password_barman_streaming}}
            - name: MY_POD_NAME
              value: postgres-{{.Values.name}}
            - name: MY_POD_NAMESPACE
              value: {{.Release.Namespace}}
{{- end }}

          ports:
            - name: postgres
              containerPort: {{.Values.port_private}}
          volumeMounts:
            - name: postgres-persistent-storage
              mountPath: /postgresql-data
            - name: db-init
              mountPath: /docker-entrypoint-initdb.d
            - name: db-maintain
              mountPath: /docker-entrypoint-maintaindb.d
            - name: postgres-etc
              mountPath: /postgresql-conf
            - name: container-init
              mountPath: /container-init
{{- if .Values.backup.enabled }}
            - name: postgres-socket
              mountPath: /var/run/postgresql
{{- end }}
{{- if .Values.backup.enabled }}
        - image: {{.Values.global.image_repository}}/{{.Values.global.image_namespace}}/backup-tools:{{.Values.backup.image_version}}
          name: backup
          env:
          - name: MY_POD_NAME
            value: postgres-{{.Values.name}}
          - name: MY_POD_NAMESPACE
            value: {{.Release.Namespace}}
          volumeMounts:
          - mountPath: /db/data
            name: postgres-persistent-storage
          - mountPath: /db/socket
            name: postgres-socket
          - mountPath: /etc/db-backup
            name: postgres-backup-config-volume
{{- end }}
        - name: metrics
          image: wrouesnel/postgres_exporter:v0.1.1
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              value: {{.Values.password}}
            - name: DATA_SOURCE_NAME
              value: "postgresql://{{.Values.user}}:{{.Values.password}}@localhost:{{.Values.port_private}}/{{.Values.name}}?sslmode=disable"
          ports:
            - name: metrics
              containerPort: {{.Values.port_metrics}}
